# -*- coding: utf-8 -*-
"""Magic Balances.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RPiURBO1oUiMPUAv0qGJsFBCXFuLvktf
"""


"""# $MAGIC Holders Over Time
---
- Token distribution of MAGIC w/ labeled wallets
- Staking Contracts
- Number of Unique Depositors
"""
from datetime import date, datetime
import time
import requests
import pandas as pd
import os 
from dotenv import load_dotenv
# start_time = datetime.now()
start_time=time.time()
load_dotenv()
ALCHEMY_API_KEY_TREASURE = os.getenv('ALCHEMY_API_KEY_TREASURE')

url = "https://arb-mainnet.g.alchemy.com/v2/{ALCHEMY_API_KEY_TREASURE}"

def get_response_wo_pagekey():
  url = f"https://arb-mainnet.g.alchemy.com/v2/{ALCHEMY_API_KEY_TREASURE}"
  payload = {
      "id": 1,
      "jsonrpc": "2.0",
      "method": "alchemy_getAssetTransfers",
      "params": [
          {
              "fromBlock": "0x0",
              "toBlock": "latest",
              "contractAddresses": ["0x539bdE0d7Dbd336b79148AA742883198BBF60342"],
              "category": ["erc20"],
              "withMetadata": True,
              "excludeZeroValue": False,
              "maxCount": "0x3e8",
              "order": "asc"
          }
      ]
  }
  headers = {
      "Accept": "application/json",
      "Content-Type": "application/json"
  }

  response = requests.post(url, json=payload, headers=headers)
  # print(response.text)
  return response


def get_response_w_pgkey(_page_key):
  url = f"https://arb-mainnet.g.alchemy.com/v2/{ALCHEMY_API_KEY_TREASURE}"

  payload = {
      "id": 1,
      "jsonrpc": "2.0",
      "method": "alchemy_getAssetTransfers",
      "params": [
          {
              "fromBlock": "0x0",
              "toBlock": "latest",
              "contractAddresses": ["0x539bdE0d7Dbd336b79148AA742883198BBF60342"],
              "category": ["erc20"],
              "withMetadata": True,
              "excludeZeroValue": False,
              "maxCount": "0x3e8",
              "order": "asc",
              "pageKey": f"{_page_key}"
          }
      ]
  }
  headers = {
      "Accept": "application/json",
      "Content-Type": "application/json"
  }

  response = requests.post(url, json=payload, headers=headers)
  return response
concat_num = 0
df_transfers = pd.DataFrame()
response_0 = get_response_wo_pagekey().json()['result']
# print(response_0)
print(response_0.keys())
page_key = response_0['pageKey']
# print(page_key)
df_transfers = pd.json_normalize(response_0['transfers'])
while page_key:
  response=get_response_w_pgkey(page_key)
  if 'error' in response.json(): 
    try:
      response=get_response_w_pgkey(page_key)
    except:
      print(response.json()['error']['code'])
  try:
    page_key = response.json()['result']['pageKey']
    # response=get_transfers_w_pgkey(page_key)
    result = response.json()['result']['transfers']
  except:
    page_key = False
    # print(response.text)
    print("page key not found")
  

  df_new = pd.json_normalize(result)

  df_transfers=pd.concat([df_transfers, df_new], axis=0)
  concat_num = concat_num + 1
  if concat_num % 50 == 0:
    print(f"Iteration Number: {concat_num}")



df_transfers=df_transfers.drop(['uniqueId', 'erc721TokenId', 'erc1155Metadata', 'tokenId', 'asset', 'category'], axis=1)
df_transfers.to_csv(f'{date.today()}_df_transfers.csv')
df_transfers.to_csv('df_transfers.csv')

stop_time = time.time()
run_time = stop_time-start_time
print(f'the script took {run_time} seconds to run')
